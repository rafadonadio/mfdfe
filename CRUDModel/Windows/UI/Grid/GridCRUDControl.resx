<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imlIcons.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imlIcons.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAABS
        CwAAAk1TRnQBSQFMAgEBBAEAAQkBAAEEAQABEAEAARABAAT/AREBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABIAMAAQEBAAEQBgABEP8A/wD/AP8A/wD/AP8A/wAkAAGtAToBRgEiAQMBEgEDARIBJQEaAYsBMjYA
        AYwBSQEpAUUBKQFFAWsBRTIAAYoBLgECARIBhAEmAeMBLgECATMBAwEzAeQBMgGlASoBAgESAWgBJgYA
        AWsBLQEIASEBqwE5AXEBfyAAAYQBTAEhAVgBQgFgAUIBaAFCAWgBQgFgASEBWAGEAUQiAAFyATUBLwEt
        BgABaQEqASQBGgEHATsBBQE3AQMBMwHHATYBpwE2AeUBNgEmATsBCQE/AUQBHgElARoEAAHVAV4B7wE9
        AeoBQQFIAX8BSAF/AUgBfwHKAW4YAAFCAVgBpQFsAaUBfAFCAXwBAQF8AUIBfAGlAXwB5wF4AaUBZAFC
        AVAB7wFJHAABcgE1AfMBKAHyASgEAAHPAT4BAwEWAQoBQwEoAT8BBgE7AeUBMgG9AXcBewFvAcsBQgEm
        ATsBKQFDASwBRwFFAR4BaAEmBAABbwFWASsBdwFrAX8BawF/AWsBfwHpAXIBjQEtFAABQgFYAWsBdQEI
        AXkBpQF4AUIBeAEhAXwBQgF8AYQBeAHnAXgBawF5AUoBbQFCAVAaAAFTATEB8wEoAfIBKAHxAUUEAAEC
        ARIB6wE+ASsBRwEpAUMBJwE7AeYBNgH/AX8BvQF3AcwBQgEnAT8BKQFDASwBRwENAUsBAwEWBAABbQF/
        AY4BfwGOAX8BjgF/AY4BfwEKAXMBQwEIAUsBJRAAAecBVAEpAW0BrQF9AfcBagEYAWcB9wFiAecBbAEI
        AW0B+AFiAfcBYgHWAV4BzgF1AecBZAHnAUAWAAFSATEB8wEoAfIBJAEyAU4EAAHNAToBRgEiAS4BTwEr
        AUcBKQFDASgBPwHoAToB/wF/Ab0BdwHNAUYBKQE/ASoBQwEsAUcBLQFLAakBMgGLATICAAGUAX8BsAF/
        AbEBfwGxAX8BjwF/AWsBfwHkAUkBQgEIAUsBKQ4AAUIBWAEQAX4BrQF9Ae8BcQH/AX8B3gF7AXMBZgH3
        AW4B/wF/Ad4BewExAW4B7wF9Aa0BdQEhAVQKAAHyAT0BsQE1AbEBNQQAAfQBRQHzASgB8gEkAZMBVgYA
        ASUBHgGqATYBDQFLAfIBUgHRAU4B0QFOAdIBUgH/AX8B3gF7AfQBVgHRAU4B0gFSAdIBTgHtAUYBDAFH
        ASUBGgQAAbABfwGyAX8BkAF/AdEBfwHPAX8BqwF/AYUBYgFCAQwBKgEhCgABrQFZAecBZAEQAX4BrQF9
        AWsBfQEYAXcB/wF/Ad4BewH/AX8B/wF/ATkBcwGsAX0B7wF9ARABfgFjAVwGAAGWAVIB2gFaAV4BYwGf
        AWcBnwFnAT0BWwE3AUYBVQFKAZMBOQoAAQMBEgHKATYBDAFHAb0BdwHeAXsB3gF7Af8BfwH/AX8B/wF/
        Af8BfwHeAXsB3gJ7AW8BzgFGAS0BSwECARIEAAE0AW8BDAFGASYBJQFyAXMB8wF/Ac8BfwGrAX8BhgJi
        ARABSwElCAABKQFRASkBaQHvAX0BrQF9AYwBfQHvAXUB/wF/Af8BfwH/AX8B3gF7ATEBbgHOAX0B7wF9
        Ae8BfQHGAWABzgFNAgABdQFOAb8BcwHfAXMBfwJfAVsBXwFbAX8BXwGfAWcB/AFaDAABAwEWAckBNgEL
        AUcBmgFvAbwBdwG8AXcBvAF3Af8BfwH/AX8B3QF3AbwBdwG8AXcBmwFzAe4BSgEsAUcBAwESBgAB9wFe
        ASoBJQGEARABMQFrAfMBfwHwAX8BrAF/AecBbgGCARQBCQEhBgABKQFRAQgBaQHOAX0BrQF9Aa0BfQEx
        AXIB/wF/Af8BfwH/AX8BvQF3ATEBagHOAX0BzgF9Ac4BfQHGAWQB7wFNAgABugFWAf8BewG/AW8BfwFj
        AZ8BZwGfAWcBnwFnAZ8BZwG/AWsBNQFGCgABaQEqAYcBKgErAUcBCwFHAQwBRwEOAUsB7wFKAf8BfwHe
        AXsB0gFSAQ8BTwEOAUsBDAFHASwBRwHqAT4BRgEeCgABSwEpAaQBFAEQAWcB9AF/AfABfwGsAX8B5wFu
        AaIBGAEqASUEAAGtAWEBxgFkAa0BfQGtAX0BzgF9ATkBcwH/AX8B/wF/Af8BfwH/AX8BGAFnAe8BeQHO
        AX0BzgF9AYQBXAQAAZ8BbwG/AW8BnwFnAb8BcwH/AXsB/wF7Ad8BdwHfAXMBvwFzAbsBVgwAAQMBFgEr
        AUcBKwFHAS0BSwEwAVMB8QFSAf8BfwG9AXcB0gFSATEBVwEvAU8BLQFLASwBRwFmASYBzQE6DAABjQEx
        AWMBDAGOAVIB9AF/AfEBfwHNAX8BKAF3AQQBJQEpASUEAAFCAVgBjAF9Aa0BfQFzAXIB/wF/Af8BfwFa
        AXMBOQFzAf8BfwHeAXsBcwFmAe8BfQGMAXkBIQFUBAABvwFrAV8BWwGfAWcB3wF3Af8BfwH/AX8B/wF7
        Af8BewH/AXsBHQFjDAABJAEWAagBMgEsAUcBLgFPATEBUwHyAVIB/wF/Ad4BewHTAVYBMgFXATABUwEt
        AUsBCwFDAQIBEhAAAc8BOQGEARABLAFKAfQBfwHxAX8BkAF7Ac0BPQHGARgB7wFVAgAB5wFYAQgBbQHO
        AX0BcwFyAdYBcgEYAXMBOQF7ARgBewEYAXMB1gFyAZQBcgHvAX0B5wFoAUoBTQQAAT4BXwF/AV8BnwFr
        Ad8BdwH/AXsB/wF7Af8BfwH/AX8B/wF/ATwBZw4AAQMBEgHJATYBLgFPATIBVwETAVcBegFvAXoBawEU
        AVsBMgFXAS8BUwELAUMBIwEaAa0BOhIAAXMBTgGFARABygE9AbYCewFzARABQgHOATkBjQFlBAABQgFY
        AYwBeQExAX4B1gF+ATkBfwF7AX8BWgF/ARgBfwG1AX4BMQF+AWsBdQFCAVQGAAFZAUYBnwFrAb8BbwG/
        AXMB3wFzAf8BewH/AX8B/wF/Af8BfwF9AW8QAAEDARIBhwEuAQ0BSwExAVMBNAFbATQBWwExAVcBLgFP
        AcgBNgECARIBrQE2FgAB9wFeARABQgEQAUIBMQFKAVoBbwEzAWoB0AFpBgABQgFYASkBbQExAX4B1gF+
        ATkBfwEYAX8BtQF+ARABfgEIAWkBQgFYCgABewFOAb8BbwG/AW8BvwFvAd8BdwH/AXsB/wF7AV0BbxQA
        ASYBHgECARIBZQEmAacBLgGnAS4BhgEqASMBGgEEARYeAAGUAVIBUwFSAXYBagHRAWEBdQFqCAABxgFc
        AUIBWAHnAWgBCAFtAQgBbQHGAWgBQgFYAecBWA4AAVoBSgGbAU4BPQFfAT0BYwH8AV4BfgFvGgABzQE6
        AWgBJgFHASYBiwEyJAAB0QFZAdEBWQF1AWYOAAGMAWUB5wFcAecBYAGMAWEsAAFCAU0BPgcAAT4DAAEo
        AwABQAMAASADAAEBAQABAQYAAQEWAAP/gQAB+AEfAv8B/AE/Av8B4AEHAQ8B/wHwAQ8B/wH5AcABAwEB
        Af8B4AEDAf8B8QGAAQEBgAH/AcABAwH/AeEBgAEBAYABfwGAAQEB/wHDAgABgAE/AYABAQHxAYcCAAHA
        AR8BAAEBAcABHwIAAcABDwIAAYABPwIAAeABBwIAAYABHwIAAfgBAwEAAQEBgAEfAYABAAH8AQEBgAEB
        AYABHwGAAQEB/gEAAYABAQGAAR8BwAEBAf8BAAHAAQMBgAEfAeABAwH/AYAB4AEHAcABPwHwAQ8B/wHg
        AfABDwHgAX8B/AE/Af8B8QH8AT8C/ws=
</value>
  </data>
</root>